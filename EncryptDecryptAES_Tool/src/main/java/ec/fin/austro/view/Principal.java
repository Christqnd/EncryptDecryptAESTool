package ec.fin.austro.view;

import java.awt.EventQueue;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class Principal extends JFrame {

    public Principal() {
        initComponents();
        Icon icon = new ImageIcon("copy_120015.png");
        this.btnCopia.setIcon(icon);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        this.rbtEncrypt = new JRadioButton();
        this.jLabel1 = new JLabel();
        this.jLabel2 = new JLabel();
        this.rbtDecrypt = new JRadioButton();
        this.jScrollPane1 = new JScrollPane();
        this.txtValor = new JTextArea();
        this.jScrollPane2 = new JScrollPane();
        this.txtRespuesta = new JTextArea();
        this.btnLimpiar = new JButton();
        this.btnProcesa = new JButton();
        this.jLabel3 = new JLabel();
        this.txtSep = new JTextField();
        this.txtClave = new JTextField();
        this.btnCopia = new JButton();
        this.jLabel4 = new JLabel();
        this.jLabel5 = new JLabel();
        this.jLabel6 = new JLabel();
        this.cbTipo = new JComboBox<>();
        this.jLabel7 = new JLabel();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        this.rbtEncrypt.setSelected(true);
        this.rbtEncrypt.setText("Encripta");
        this.rbtEncrypt.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                Principal.this.rbtEncryptStateChanged(evt);
            }
        });
        this.jLabel1.setText("Proceso:");
        this.jLabel2.setText("Tipo:");
        this.rbtDecrypt.setText("Desencripta");
        this.rbtDecrypt.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                Principal.this.rbtDecryptStateChanged(evt);
            }
        });
        this.txtValor.setColumns(20);
        this.txtValor.setRows(5);
        this.jScrollPane1.setViewportView(this.txtValor);
        this.txtRespuesta.setEditable(false);
        this.txtRespuesta.setColumns(20);
        this.txtRespuesta.setRows(5);
        this.jScrollPane2.setViewportView(this.txtRespuesta);
        this.btnLimpiar.setText("LIMPIAR");
        this.btnLimpiar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                Principal.this.btnLimpiarActionPerformed(evt);
            }
        });
        this.btnProcesa.setText("PROCESAR");
        this.btnProcesa.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                Principal.this.btnProcesaActionPerformed(evt);
            }
        });
        this.jLabel3.setText("Separador:");
        this.txtSep.setEnabled(false);
        this.btnCopia.setText("Copiar");
        this.btnCopia.setToolTipText("Copiar");
        this.btnCopia.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                Principal.this.btnCopiaActionPerformed(evt);
            }
        });
        this.jLabel4.setText("Texto:");
        this.jLabel5.setText("Resultado:");
        this.jLabel6.setText("ENCRIPTAR - DESENCRIPTAR (AES256)");
        this.cbTipo.setModel(new DefaultComboBoxModel<>(new String[]{"Normal", "Clave", "Propertie"}));
        this.cbTipo.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                Principal.this.cbTipoItemStateChanged(evt);
            }
        });
        this.cbTipo.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                Principal.this.cbTipoPropertyChange(evt);
            }
        });
        this.jLabel7.setText("CLAVE:");
        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout
                .createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                                .addComponent(this.jScrollPane1)
                                                .addComponent(this.jScrollPane2)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addGap(4, 4, 4)
                                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(this.jLabel7)
                                                                        .addGap(38, 38, 38)
                                                                        .addComponent(this.txtClave))
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                                .addGroup(layout.createSequentialGroup()
                                                                                        .addComponent(this.jLabel5)
                                                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                                                        .addComponent(this.btnCopia, -2, 87, -2))
                                                                                .addComponent(this.jLabel4)
                                                                                .addGroup(layout.createSequentialGroup()
                                                                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                                                .addComponent(this.jLabel1)
                                                                                                .addComponent(this.jLabel2))
                                                                                        .addGap(28, 28, 28)
                                                                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                                                                .addGroup(layout.createSequentialGroup()
                                                                                                        .addComponent(this.rbtEncrypt)
                                                                                                        .addGap(32, 32, 32)
                                                                                                        .addComponent(this.rbtDecrypt))
                                                                                                .addGroup(layout.createSequentialGroup()
                                                                                                        .addComponent(this.cbTipo, -2, -1, -2)
                                                                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                                        .addComponent(this.jLabel3)
                                                                                                        .addGap(18, 18, 18)
                                                                                                        .addComponent(this.txtSep, -2, 91, -2)))))
                                                                        .addGap(506, 506, 506))))))
                                .addGroup(layout.createSequentialGroup()
                                        .addGap(325, 325, 325)
                                        .addComponent(this.jLabel6))
                                .addGroup(layout.createSequentialGroup()
                                        .addGap(347, 347, 347)
                                        .addComponent(this.btnLimpiar)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(this.btnProcesa)))
                        .addContainerGap(10, 32767)));
        layout.setVerticalGroup(layout
                .createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(this.jLabel6)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(this.rbtEncrypt)
                                .addComponent(this.jLabel1)
                                .addComponent(this.rbtDecrypt))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(this.jLabel2)
                                .addComponent(this.jLabel3)
                                .addComponent(this.txtSep, -2, -1, -2)
                                .addComponent(this.cbTipo, -2, -1, -2))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(this.txtClave, -2, -1, -2)
                                .addComponent(this.jLabel7))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(this.jLabel4)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(this.jScrollPane1, -2, -1, -2)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(this.btnLimpiar)
                                .addComponent(this.btnProcesa))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, -1, 32767)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(this.jLabel5)
                                .addComponent(this.btnCopia, -2, 26, -2))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(this.jScrollPane2, -2, -1, -2)
                        .addGap(77, 77, 77)));
        pack();
    }// </editor-fold>//GEN-END:initComponents    

    private void rbtEncryptStateChanged(ChangeEvent evt) {//GEN-FIRST:event_rbtEncryptStateChanged
        if (this.rbtEncrypt.isSelected()) {
            this.rbtDecrypt.setSelected(false);
        }
    }//GEN-LAST:event_rbtEncryptStateChanged

    private void rbtDecryptStateChanged(ChangeEvent evt) {//GEN-FIRST:event_rbtDecryptStateChanged
        if (this.rbtDecrypt.isSelected()) {
            this.rbtEncrypt.setSelected(false);
        }
    }//GEN-LAST:event_rbtDecryptStateChanged

    public void escribeResultado(List<EncryptDecryptAction.Propiedad> lista) {
        this.txtRespuesta.setText("");
        for (EncryptDecryptAction.Propiedad propiedad : lista) {
            this.txtRespuesta.append(propiedad.toString() + "\n");
        }
    }

    public void copyClipboard(String copyText) {
        StringSelection ss = new StringSelection(copyText);
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null);
    }

    private void btnProcesaActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnProcesaActionPerformed
        List<EncryptDecryptAction.Propiedad> listOriginal, re;
        EncryptDecryptAction edu = new EncryptDecryptAction();
        String res = "";
        String clave = this.txtClave.getText();
        String valor = this.txtValor.getText();
        if (this.txtClave.isEnabled() && (clave == null || clave.equals(""))) {
            JOptionPane.showMessageDialog(this.rootPane, "Clave de Encriptacion vac");
            return;
        }
        if (valor == null) {
            JOptionPane.showMessageDialog(this.rootPane, "Texto de Entrada vac");
            return;
        }
        if (this.txtSep.isEnabled() && (this.txtSep.getText().trim() == null || this.txtSep.getText().trim().equals(""))) {
            this.txtSep.setFocusable(true);
            JOptionPane.showMessageDialog(this.rootPane, "Separador de properties vac");
            return;
        }
        int item = this.cbTipo.getSelectedIndex();
        switch (item) {
            case 0:
                if (this.rbtEncrypt.isSelected()) {
                    res = edu.encripta(clave, valor);
                } else {
                    res = edu.desencripta(clave, valor);
                }
                this.txtRespuesta.setText(res);
                break;
            case 1:
                if (this.rbtEncrypt.isSelected()) {
                    res = edu.encripta(valor);
                } else {
                    res = edu.desencripta(valor);
                }
                this.txtRespuesta.setText(res);
                break;
            case 2:
                listOriginal = edu.listarTexto(valor, this.txtSep.getText().trim());
                re = null;
                if (this.rbtEncrypt.isSelected()) {
                    re = edu.encriptaLista(clave, listOriginal);
                } else {
                    re = edu.desencriptaLista(clave, listOriginal);
                }
                escribeResultado(re);
                break;
            default:
                throw new AssertionError();
        }
        if (!res.equals("")
                && res.contains("*Error")) {
            this.txtRespuesta.setText("");
            JOptionPane.showMessageDialog(this.rootPane, res);
        }
    }//GEN-LAST:event_btnProcesaActionPerformed

    private void btnLimpiarActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.txtRespuesta.setText("");
        this.txtValor.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnCopiaActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnCopiaActionPerformed
        copyClipboard(this.txtRespuesta.getText());
    }//GEN-LAST:event_btnCopiaActionPerformed

    private void cbTipoPropertyChange(PropertyChangeEvent evt) {//GEN-FIRST:event_cbTipoPropertyChange
    // TODO add your handling code here:
    }//GEN-LAST:event_cbTipoPropertyChange

    private void cbTipoItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_cbTipoItemStateChanged
        if (this.cbTipo.getSelectedIndex() == 2) {
            this.txtSep.setEnabled(true);
        } else {
            this.txtSep.setEnabled(false);
        }
        if (this.cbTipo.getSelectedIndex() == 1) {
            this.txtClave.setEnabled(false);
        } else {
            this.txtClave.setEnabled(true);
        }
    }//GEN-LAST:event_cbTipoItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */ 
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, (String) null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, (String) null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, (String) null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, (String) null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */														
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                (new Principal()).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnCopia;
    private JButton btnLimpiar;
    private JButton btnProcesa;
    private JComboBox<String> cbTipo;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JRadioButton rbtDecrypt;
    private JRadioButton rbtEncrypt;
    private JTextField txtClave;
    private JTextArea txtRespuesta;
    private JTextField txtSep;
    private JTextArea txtValor;
    // End of variables declaration//GEN-END:variables
}
